["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$speclj.core","~:imports",null,"~:requires",["^ ","~$speclj.run.standard","^9","~$speclj.platform","^:","~$speclj.error","^;","~$speclj.config","^<","~$speclj.report.documentation","^=","~$speclj.tags","^>","~$speclj.results","^?","~$speclj.report.progress","^@","~$speclj.reporting","^A","~$speclj.report.silent","^B","~$speclj.stub","^C","~$speclj.components","^D","~$clojure.string","^E","~$clojure.data","^F","~$speclj.running","^G"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$when-not-bound",["^ ","~:no-doc",true,"~:protocol-inline",null,"~:meta",["^ ","^L",true,"~:file","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","~:end-column",34,"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",["~#list",[["^V",["~$name","~$body"]]]],"~:arglists",["^V",[["^W","~$&","^X"]]],"~:arglists-meta",["^V",[null]]],"~:column",20,"~:line",87,"~:macro",true,"~:end-line",87,"^Y",["^V",["~$quote",["^V",[["^W","~$&","^X"]]]]]],"^5","~$speclj.core/when-not-bound","^O","resources/public/cljs/speclj/core.cljc","^P",34,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^X"]]]],"~:protocol-impl",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"~:methods",[["^ ","^S",1,"^R",true,"~:tag",["^4",["~$seq","~$cljs.core/IList"]]]],"^10",87,"^11",true,"~:ret-tag","~$any","^12",87,"^T",1,"~:fn-var",false,"^Y",["^V",[["^W","~$&","^X"]]]],"~$should-not-contain",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",333,"^[",11,"^12",333,"^P",29,"^11",true,"^Y",["^V",["^13",["^V",[["~$expected","~$actual"]]]]],"~:doc","Multipurpose assertion of non-containment.  See should-contain as an example of opposite behavior."],"^5","~$speclj.core/should-not-contain","^O","resources/public/cljs/speclj/core.cljc","^P",29,"^U",["^V",[["~$&form","~$&env","^1>","^1?"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",333,"^11",true,"^1:",["^4",["^18","^19"]],"^12",333,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^1>","^1?"]]]]],"^1@","Multipurpose assertion of non-containment.  See should-contain as an example of opposite behavior."],"~$xit",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",14,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",74,"^11",true,"^12",74,"^Y",["^V",["^13",["^V",[["^W","~$&","^X"]]]]],"^1@","Syntactic shortcut to make the characteristic pending."],"^5","~$speclj.core/xit","^O","resources/public/cljs/speclj/core.cljc","^P",14,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^X"]]]],"^15",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",1,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",74,"^11",true,"^1:","^1;","^12",74,"^T",1,"^1<",false,"^Y",["^V",[["^W","~$&","^X"]]],"^1@","Syntactic shortcut to make the characteristic pending."],"~$should-not-start-with",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",444,"^[",11,"^12",444,"^P",32,"^11",true,"^Y",["^V",["^13",["^V",[["~$prefix","~$whole"]]]]],"^1@","The inverse of should-start-with."],"^5","~$speclj.core/should-not-start-with","^O","resources/public/cljs/speclj/core.cljc","^P",32,"^U",["^V",[["^1B","^1C","^1G","^1H"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",444,"^11",true,"^1:",["^4",["^18","^19"]],"^12",444,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^1G","^1H"]]]]],"^1@","The inverse of should-start-with."],"~$-new-failure",["^ ","^L",true,"^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",40,"^[",20,"^12",40,"^P",32,"^L",true,"^11",true,"^Y",["^V",["^13",["^V",[["~$message"]]]]]],"^5","~$speclj.core/-new-failure","^O","resources/public/cljs/speclj/core.cljc","^P",32,"^U",["^V",[["^1B","^1C","^1K"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",40,"^11",true,"^1:",["^4",["^18","^19"]],"^12",40,"^T",3,"^1<",false,"^Y",["^V",["^13",["^V",[["^1K"]]]]]],"~$-coll-difference",["^ ","^L",true,"^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",404,"^[",20,"^12",404,"^P",36,"^L",true,"^11",true,"^Y",["^V",["^13",["^V",[["~$coll1","~$coll2"]]]]]],"^5","~$speclj.core/-coll-difference","^O","resources/public/cljs/speclj/core.cljc","^P",36,"^U",["^V",[["^1B","^1C","^1N","^1O"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",404,"^11",true,"^1:",["^4",["^18","^19"]],"^12",404,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^1N","^1O"]]]]]],"~$should-end-with",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",466,"^[",11,"^12",466,"^P",26,"^11",true,"^Y",["^V",["^13",["^V",[["~$suffix","^1H"]]]]],"^1@","Assertion of suffix in strings and sequences.\n\n  (should-end-with \"foo\" \"foobar\")            ; looks for string suffix\n  (should-end-with [1 2] [1 2 3 4])               ; looks for a subset at end of collection"],"^5","~$speclj.core/should-end-with","^O","resources/public/cljs/speclj/core.cljc","^P",26,"^U",["^V",[["^1B","^1C","^1R","^1H"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",466,"^11",true,"^1:",["^4",["^18","^19"]],"^12",466,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^1R","^1H"]]]]],"^1@","Assertion of suffix in strings and sequences.\n\n  (should-end-with \"foo\" \"foobar\")            ; looks for string suffix\n  (should-end-with [1 2] [1 2 3 4])               ; looks for a subset at end of collection"],"~$before",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",17,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["^X"]]]],"^Y",["^V",[["~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",121,"^11",true,"^12",121,"^Y",["^V",["^13",["^V",[["~$&","^X"]]]]],"^1@","Declares a function that is invoked before each characteristic in the containing describe scope is evaluated. The body\n  may consist of any forms, presumably ones that perform side effects."],"^5","~$speclj.core/before","^O","resources/public/cljs/speclj/core.cljc","^P",17,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["^X"]]]],"^Y",["^V",[["~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^X"]]]],"^15",null,"^S",0,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",0,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",121,"^11",true,"^1:","^1;","^12",121,"^T",0,"^1<",false,"^Y",["^V",[["~$&","^X"]]],"^1@","Declares a function that is invoked before each characteristic in the containing describe scope is evaluated. The body\n  may consist of any forms, presumably ones that perform side effects."],"~$-make-with",["^ ","^L",true,"^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",167,"^[",16,"^12",167,"^P",26,"^L",true,"^Y",["^V",["^13",["^V",[["^W","^X","~$ctor","~$bang?"]]]]]],"^5","~$speclj.core/-make-with","^O","resources/public/cljs/speclj/core.cljc","^P",26,"^U",["^V",[["^W","^X","^1W","^1X"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",167,"^1:",["^4",["^18","^19"]],"^12",167,"^T",4,"^1<",true,"^Y",["^V",["^13",["^V",[["^W","^X","^1W","^1X"]]]]]],"~$focus-describe",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",25,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","~$components"]]]],"^Y",["^V",[["^W","~$&","^1["]]],"^Z",["^V",[null]]],"^[",11,"^10",99,"^11",true,"^12",99,"^Y",["^V",["^13",["^V",[["^W","~$&","^1["]]]]],"^1@","Same as 'describe', but it is meant to facilitate temporary debugging.\n   Components defined with this macro will be fully executed along with any\n   other components thus defined, but all other sibling components defined\n   with 'describe' will be ignored."],"^5","~$speclj.core/focus-describe","^O","resources/public/cljs/speclj/core.cljc","^P",25,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^1["]]]],"^Y",["^V",[["^W","~$&","^1["]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^1["]]]],"^15",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",1,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",99,"^11",true,"^1:","^1;","^12",99,"^T",1,"^1<",false,"^Y",["^V",[["^W","~$&","^1["]]],"^1@","Same as 'describe', but it is meant to facilitate temporary debugging.\n   Components defined with this macro will be fully executed along with any\n   other components thus defined, but all other sibling components defined\n   with 'describe' will be ignored."],"~$should-be-a",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",627,"^[",11,"^12",627,"^P",22,"^11",true,"^Y",["^V",["^13",["^V",[["~$expected-type","~$actual-form"]]]]],"^1@","Asserts that the type of the given form derives from or equals the expected type"],"^5","~$speclj.core/should-be-a","^O","resources/public/cljs/speclj/core.cljc","^P",22,"^U",["^V",[["^1B","^1C","^22","^23"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",627,"^11",true,"^1:",["^4",["^18","^19"]],"^12",627,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^22","^23"]]]]],"^1@","Asserts that the type of the given form derives from or equals the expected type"],"~$should-not-be-nil",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",567,"^[",11,"^12",567,"^P",28,"^11",true,"^Y",["^V",["^13",["^V",[["~$form"]]]]],"^1@","Asserts that the form evaluates to a non-nil value"],"^5","~$speclj.core/should-not-be-nil","^O","resources/public/cljs/speclj/core.cljc","^P",28,"^U",["^V",[["^1B","^1C","^26"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",567,"^11",true,"^1:",["^4",["^18","^19"]],"^12",567,"^T",3,"^1<",false,"^Y",["^V",["^13",["^V",[["^26"]]]]],"^1@","Asserts that the form evaluates to a non-nil value"],"~$around",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",17,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["~$binding","^X"]]]],"^Y",["^V",[["^29","~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",133,"^11",true,"^12",133,"^Y",["^V",["^13",["^V",[["^29","~$&","^X"]]]]],"^1@","Declares a function that will be invoked around each characteristic of the containing describe scope.\n  The characteristic will be passed in and the around function is responsible for invoking it.\n\n  (around [it] (binding [*out* new-out] (it)))\n\n  Note that if you have cleanup that must run, use a 'finally' block:\n\n  (around [it] (try (it) (finally :clean-up)))"],"^5","~$speclj.core/around","^O","resources/public/cljs/speclj/core.cljc","^P",17,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^29","^X"]]]],"^Y",["^V",[["^29","~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^29","^X"]]]],"^15",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",1,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",133,"^11",true,"^1:","^1;","^12",133,"^T",1,"^1<",false,"^Y",["^V",[["^29","~$&","^X"]]],"^1@","Declares a function that will be invoked around each characteristic of the containing describe scope.\n  The characteristic will be passed in and the around function is responsible for invoking it.\n\n  (around [it] (binding [*out* new-out] (it)))\n\n  Note that if you have cleanup that must run, use a 'finally' block:\n\n  (around [it] (try (it) (finally :clean-up)))"],"~$should-not=",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",277,"^[",11,"^12",277,"^P",22,"^11",true,"^Y",["^V",["^13",["^V",[["~$expected-form","^23"]]]]],"^1@","Asserts that two forms evaluate to unequal values, with the unexpected value as the first parameter."],"^5","~$speclj.core/should-not=","^O","resources/public/cljs/speclj/core.cljc","^P",22,"^U",["^V",[["^1B","^1C","^2<","^23"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",277,"^11",true,"^1:",["^4",["^18","^19"]],"^12",277,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^2<","^23"]]]]],"^1@","Asserts that two forms evaluate to unequal values, with the unexpected value as the first parameter."],"~$wrong-types",["^ ","^L",true,"^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",224,"^[",20,"^12",224,"^P",31,"^L",true,"^11",true,"^Y",["^V",["^13",["^V",[["~$assertion","~$a","~$b"]]]]]],"^5","~$speclj.core/wrong-types","^O","resources/public/cljs/speclj/core.cljc","^P",31,"^U",["^V",[["^1B","^1C","^2?","~$a","~$b"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",224,"^11",true,"^1:",["^4",["^18","^19"]],"^12",224,"^T",5,"^1<",false,"^Y",["^V",["^13",["^V",[["^2?","~$a","~$b"]]]]]],"~$with!",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",16,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",182,"^11",true,"^12",182,"^Y",["^V",["^13",["^V",[["^W","~$&","^X"]]]]],"^1@","Declares a reference-able symbol that will be evaluated immediately and reset once per characteristic of the containing\n  describe scope.  The body may contain any forms, the last of which will be the value of the dereferenced symbol.\n\n  (def my-num (atom 0))\n  (with! my-with! (swap! my-num inc))\n  (it \"increments my-num before being accessed\" (should= 1 @my-num) (should= 2 @my-with!))"],"^5","~$speclj.core/with!","^O","resources/public/cljs/speclj/core.cljc","^P",16,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^X"]]]],"^15",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",1,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",182,"^11",true,"^1:","^1;","^12",182,"^T",1,"^1<",false,"^Y",["^V",[["^W","~$&","^X"]]],"^1@","Declares a reference-able symbol that will be evaluated immediately and reset once per characteristic of the containing\n  describe scope.  The body may contain any forms, the last of which will be the value of the dereferenced symbol.\n\n  (def my-num (atom 0))\n  (with! my-with! (swap! my-num inc))\n  (it \"increments my-num before being accessed\" (should= 1 @my-num) (should= 2 @my-with!))"],"~$should-not==",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",548,"^[",11,"^12",548,"^P",23,"^11",true,"^Y",["^V",["^13",["^V",[["^1>","^1?"]]]]],"^1@","Asserts 'non-equivalency'.\n  When passed collections it will check that they do NOT have the same contents.\n  For anything else it will assert that clojure.core/== returns false."],"^5","~$speclj.core/should-not==","^O","resources/public/cljs/speclj/core.cljc","^P",23,"^U",["^V",[["^1B","^1C","^1>","^1?"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",548,"^11",true,"^1:",["^4",["^18","^19"]],"^12",548,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^1>","^1?"]]]]],"^1@","Asserts 'non-equivalency'.\n  When passed collections it will check that they do NOT have the same contents.\n  For anything else it will assert that clojure.core/== returns false."],"~$should<=",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",858,"^[",11,"^12",858,"^P",19,"^11",true,"^Y",["^V",["^13",["^V",[["~$a","~$b"]]]]],"^1@","Asserts that the first numeric form is less than or equal to the second numeric form, using the built-in <= function."],"^5","~$speclj.core/should<=","^O","resources/public/cljs/speclj/core.cljc","^P",19,"^U",["^V",[["^1B","^1C","~$a","~$b"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",858,"^11",true,"^1:",["^4",["^18","^19"]],"^12",858,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["~$a","~$b"]]]]],"^1@","Asserts that the first numeric form is less than or equal to the second numeric form, using the built-in <= function."],"~$should-throw",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",23,"^Q",["^ ","^R",false,"^S",3,"^T",3,"^U",["^V",[["^26"],["~$throwable-type","^26"],["^2H","~$predicate","^26"]]],"^Y",["^V",[["^26"],["^2H","^26"],["^2H","^2I","^26"]]],"^Z",["^V",[null,null,null]]],"^[",11,"^10",584,"^11",true,"^12",584,"^Y",["^V",["^13",["^V",[["^26"],["^2H","^26"],["^2H","^2I","^26"]]]]],"^1@","Asserts that a Throwable is throws by the evaluation of a form.\nWhen a class is passed, it asserts that the thrown Exception is an instance of the class.\nThere are three options for passing different kinds of predicates:\n  - If a string, assert that the message of the Exception is equal to the string.\n  - If a regex, asserts that the message of the Exception matches the regex.\n  - If a function, assert that calling the function on the Exception returns a truthy value."],"^5","~$speclj.core/should-throw","^O","resources/public/cljs/speclj/core.cljc","^P",23,"^Q",["^ ","^R",false,"^S",3,"^T",3,"^U",["^V",[["^26"],["^2H","^26"],["^2H","^2I","^26"]]],"^Y",["^V",[["^26"],["^2H","^26"],["^2H","^2I","^26"]]],"^Z",["^V",[null,null,null]]],"^U",["^V",[["^26"],["^2H","^26"],["^2H","^2I","^26"]]],"^15",null,"^S",3,"^Z",["^V",[null,null,null]],"^[",1,"^R",false,"^16",[["^ ","^S",3,"^R",false,"^17",["^4",["^18","^19"]]],["^ ","^S",4,"^R",false,"^17",["^4",["^18","^19"]]],["^ ","^S",5,"^R",false,"^17",["^4",["^18","^19"]]]],"^10",584,"^11",true,"^12",584,"^T",3,"^1<",false,"^Y",["^V",[["^26"],["^2H","^26"],["^2H","^2I","^26"]]],"^1@","Asserts that a Throwable is throws by the evaluation of a form.\nWhen a class is passed, it asserts that the thrown Exception is an instance of the class.\nThere are three options for passing different kinds of predicates:\n  - If a string, assert that the message of the Exception is equal to the string.\n  - If a regex, asserts that the message of the Exception matches the regex.\n  - If a function, assert that calling the function on the Exception returns a truthy value."],"~$help-describe",["^ ","^L",true,"^M",null,"^N",["^ ","^L",true,"^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",33,"^Q",["^ ","^R",true,"^S",2,"^T",2,"^U",["^V",[["^V",["^W","~$focused?","^1["]]]],"^Y",["^V",[["^W","^2L","~$&","^1["]]],"^Z",["^V",[null]]],"^[",20,"^10",51,"^11",true,"^12",51,"^Y",["^V",["^13",["^V",[["^W","^2L","~$&","^1["]]]]]],"^5","~$speclj.core/help-describe","^O","resources/public/cljs/speclj/core.cljc","^P",33,"^Q",["^ ","^R",true,"^S",2,"^T",2,"^U",["^V",[["^V",["^W","^2L","^1["]]]],"^Y",["^V",[["^W","^2L","~$&","^1["]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^2L","^1["]]]],"^15",null,"^S",2,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",2,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",51,"^11",true,"^1:","^1;","^12",51,"^T",2,"^1<",false,"^Y",["^V",[["^W","^2L","~$&","^1["]]]],"~$tags",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",15,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["~$values"]]]],"^Y",["^V",[["~$&","^2O"]]],"^Z",["^V",[null]]],"^[",11,"^10",654,"^11",true,"^12",654,"^Y",["^V",["^13",["^V",[["~$&","^2O"]]]]],"^1@","Add tags to the containing context.  All values passed will be converted into keywords.  Contexts can be filtered\n  at runtime by their tags.\n\n  (tags :one :two)"],"^5","~$speclj.core/tags","^O","resources/public/cljs/speclj/core.cljc","^P",15,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["^2O"]]]],"^Y",["^V",[["~$&","^2O"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^2O"]]]],"^15",null,"^S",0,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",0,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",654,"^11",true,"^1:","^1;","^12",654,"^T",0,"^1<",false,"^Y",["^V",[["~$&","^2O"]]],"^1@","Add tags to the containing context.  All values passed will be converted into keywords.  Contexts can be filtered\n  at runtime by their tags.\n\n  (tags :one :two)"],"~$should-contain",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",306,"^[",11,"^12",306,"^P",25,"^11",true,"^Y",["^V",["^13",["^V",[["^1>","^1?"]]]]],"^1@","Multipurpose assertion of containment.  Works on strings, regular expressions, sequences, and maps.\n\n  (should-contain \"foo\" \"foobar\")            ; looks for sub-string\n  (should-contain #\"hello.*\" \"hello, world\") ; looks for regular expression\n  (should-contain :foo {:foo :bar})          ; looks for a key in a map\n  (should-contain 3 [1 2 3 4])               ; looks for an object in a collection"],"^5","~$speclj.core/should-contain","^O","resources/public/cljs/speclj/core.cljc","^P",25,"^U",["^V",[["^1B","^1C","^1>","^1?"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",306,"^11",true,"^1:",["^4",["^18","^19"]],"^12",306,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^1>","^1?"]]]]],"^1@","Multipurpose assertion of containment.  Works on strings, regular expressions, sequences, and maps.\n\n  (should-contain \"foo\" \"foobar\")            ; looks for sub-string\n  (should-contain #\"hello.*\" \"hello, world\") ; looks for regular expression\n  (should-contain :foo {:foo :bar})          ; looks for a key in a map\n  (should-contain 3 [1 2 3 4])               ; looks for an object in a collection"],"~$after-all",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",20,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["^X"]]]],"^Y",["^V",[["~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",156,"^11",true,"^12",156,"^Y",["^V",["^13",["^V",[["~$&","^X"]]]]],"^1@","Declares a function that is invoked once after all the characteristics in the containing describe scope have been\n  evaluated.  The body may consist of any forms, presumably ones that perform side effects."],"^5","~$speclj.core/after-all","^O","resources/public/cljs/speclj/core.cljc","^P",20,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["^X"]]]],"^Y",["^V",[["~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^X"]]]],"^15",null,"^S",0,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",0,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",156,"^11",true,"^1:","^1;","^12",156,"^T",0,"^1<",false,"^Y",["^V",[["~$&","^X"]]],"^1@","Declares a function that is invoked once after all the characteristics in the containing describe scope have been\n  evaluated.  The body may consist of any forms, presumably ones that perform side effects."],"~$help-it",["^ ","^L",true,"^M",null,"^N",["^ ","^L",true,"^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",27,"^Q",["^ ","^R",true,"^S",2,"^T",2,"^U",["^V",[["^V",["^W","^2L","^X"]]]],"^Y",["^V",[["^W","^2L","~$&","^X"]]],"^Z",["^V",[null]]],"^[",20,"^10",46,"^11",true,"^12",46,"^Y",["^V",["^13",["^V",[["^W","^2L","~$&","^X"]]]]]],"^5","~$speclj.core/help-it","^O","resources/public/cljs/speclj/core.cljc","^P",27,"^Q",["^ ","^R",true,"^S",2,"^T",2,"^U",["^V",[["^V",["^W","^2L","^X"]]]],"^Y",["^V",[["^W","^2L","~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^2L","^X"]]]],"^15",null,"^S",2,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",2,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",46,"^11",true,"^1:","^1;","^12",46,"^T",2,"^1<",false,"^Y",["^V",[["^W","^2L","~$&","^X"]]]],"~$-remove-first",["^ ","^L",true,"^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",394,"^[",20,"^12",394,"^P",33,"^L",true,"^11",true,"^Y",["^V",["^13",["^V",[["~$coll","~$value"]]]]]],"^5","~$speclj.core/-remove-first","^O","resources/public/cljs/speclj/core.cljc","^P",33,"^U",["^V",[["^1B","^1C","^2X","^2Y"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",394,"^11",true,"^1:",["^4",["^18","^19"]],"^12",394,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^2X","^2Y"]]]]]],"~$should==",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",529,"^[",11,"^12",529,"^P",19,"^11",true,"^Y",["^V",["^13",["^V",[["^1>","^1?"]]]]],"^1@","Asserts 'equivalency'.\n  When passed collections it will check that they have the same contents.\n  For anything else it will assert that clojure.core/== returns true."],"^5","~$speclj.core/should==","^O","resources/public/cljs/speclj/core.cljc","^P",19,"^U",["^V",[["^1B","^1C","^1>","^1?"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",529,"^11",true,"^1:",["^4",["^18","^19"]],"^12",529,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^1>","^1?"]]]]],"^1@","Asserts 'equivalency'.\n  When passed collections it will check that they have the same contents.\n  For anything else it will assert that clojure.core/== returns true."],"~$should-not-be-a",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",637,"^[",11,"^12",637,"^P",26,"^11",true,"^Y",["^V",["^13",["^V",[["^22","^23"]]]]],"^1@","Asserts that the type of the given form does not derive from or equal the expected type"],"^5","~$speclj.core/should-not-be-a","^O","resources/public/cljs/speclj/core.cljc","^P",26,"^U",["^V",[["^1B","^1C","^22","^23"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",637,"^11",true,"^1:",["^4",["^18","^19"]],"^12",637,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^22","^23"]]]]],"^1@","Asserts that the type of the given form does not derive from or equal the expected type"],"~$should-fail",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",22,"^Q",["^ ","^R",false,"^S",1,"^T",1,"^U",["^V",[[],["^1K"]]],"^Y",["^V",[[],["^1K"]]],"^Z",["^V",[null,null]]],"^[",11,"^10",572,"^11",true,"^12",572,"^Y",["^V",["^13",["^V",[[],["^1K"]]]]],"^1@","Forces a failure. An optional message may be passed in."],"^5","~$speclj.core/should-fail","^O","resources/public/cljs/speclj/core.cljc","^P",22,"^Q",["^ ","^R",false,"^S",1,"^T",1,"^U",["^V",[[],["^1K"]]],"^Y",["^V",[[],["^1K"]]],"^Z",["^V",[null,null]]],"^U",["^V",[[],["^1K"]]],"^15",null,"^S",1,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^16",[["^ ","^S",2,"^R",false,"^17",["^4",["^18","^19"]]],["^ ","^S",3,"^R",false,"^17",["^4",["^18","^19"]]]],"^10",572,"^11",true,"^12",572,"^T",1,"^1<",false,"^Y",["^V",[[],["^1K"]]],"^1@","Forces a failure. An optional message may be passed in."],"~$-new-pending",["^ ","^L",true,"^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",43,"^[",20,"^12",43,"^P",32,"^L",true,"^11",true,"^Y",["^V",["^13",["^V",[["^1K"]]]]]],"^5","~$speclj.core/-new-pending","^O","resources/public/cljs/speclj/core.cljc","^P",32,"^U",["^V",[["^1B","^1C","^1K"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",43,"^11",true,"^1:",["^4",["^18","^19"]],"^12",43,"^T",3,"^1<",false,"^Y",["^V",["^13",["^V",[["^1K"]]]]]],"~$should=",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",18,"^Q",["^ ","^R",false,"^S",3,"^T",3,"^U",["^V",[["^2<","^23"],["^2<","^23","~$delta-form"]]],"^Y",["^V",[["^2<","^23"],["^2<","^23","^38"]]],"^Z",["^V",[null,null]]],"^[",11,"^10",246,"^11",true,"^12",246,"^Y",["^V",["^13",["^V",[["^2<","^23"],["^2<","^23","^38"]]]]],"^1@","Asserts that two forms evaluate to equal values, with the expected value as the first parameter."],"^5","~$speclj.core/should=","^O","resources/public/cljs/speclj/core.cljc","^P",18,"^Q",["^ ","^R",false,"^S",3,"^T",3,"^U",["^V",[["^2<","^23"],["^2<","^23","^38"]]],"^Y",["^V",[["^2<","^23"],["^2<","^23","^38"]]],"^Z",["^V",[null,null]]],"^U",["^V",[["^2<","^23"],["^2<","^23","^38"]]],"^15",null,"^S",3,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^16",[["^ ","^S",4,"^R",false,"^17",["^4",["^18","^19"]]],["^ ","^S",5,"^R",false,"^17",["^4",["^18","^19"]]]],"^10",246,"^11",true,"^12",246,"^T",3,"^1<",false,"^Y",["^V",[["^2<","^23"],["^2<","^23","^38"]]],"^1@","Asserts that two forms evaluate to equal values, with the expected value as the first parameter."],"~$help-should",["^ ","^L",true,"^M",null,"^N",["^ ","^L",true,"^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",31,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["^X"]]]],"^Y",["^V",[["~$&","^X"]]],"^Z",["^V",[null]]],"^[",20,"^10",63,"^11",true,"^12",63,"^Y",["^V",["^13",["^V",[["~$&","^X"]]]]]],"^5","~$speclj.core/help-should","^O","resources/public/cljs/speclj/core.cljc","^P",31,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["^X"]]]],"^Y",["^V",[["~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^X"]]]],"^15",null,"^S",0,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",0,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",63,"^11",true,"^1:","^1;","^12",63,"^T",0,"^1<",false,"^Y",["^V",[["~$&","^X"]]]],"~$with-stubs",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",663,"^[",11,"^12",663,"^P",21,"^11",true,"^Y",["^V",["^13",["^V",[[]]]]],"^1@","Add this to describe/context blocks that use stubs.  It will set up a clean recording environment."],"^5","~$speclj.core/with-stubs","^O","resources/public/cljs/speclj/core.cljc","^P",21,"^U",["^V",[["^1B","^1C"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",663,"^11",true,"^1:",["^4",["^18","^19"]],"^12",663,"^T",2,"^1<",false,"^Y",["^V",["^13",["^V",[[]]]]],"^1@","Add this to describe/context blocks that use stubs.  It will set up a clean recording environment."],"~$should",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",231,"^[",11,"^12",231,"^P",17,"^11",true,"^Y",["^V",["^13",["^V",[["^26"]]]]],"^1@","Asserts the truthy-ness of a form"],"^5","~$speclj.core/should","^O","resources/public/cljs/speclj/core.cljc","^P",17,"^U",["^V",[["^1B","^1C","^26"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",231,"^11",true,"^1:",["^4",["^18","^19"]],"^12",231,"^T",3,"^1<",false,"^Y",["^V",["^13",["^V",[["^26"]]]]],"^1@","Asserts the truthy-ness of a form"],"~$-difference-message",["^ ","^L",true,"^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",522,"^[",20,"^12",522,"^P",39,"^L",true,"^11",true,"^Y",["^V",["^13",["^V",[["^1>","^1?","~$extra","~$missing"]]]]]],"^5","~$speclj.core/-difference-message","^O","resources/public/cljs/speclj/core.cljc","^P",39,"^U",["^V",[["^1B","^1C","^1>","^1?","^3A","^3B"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",522,"^11",true,"^1:",["^4",["^18","^19"]],"^12",522,"^T",6,"^1<",false,"^Y",["^V",["^13",["^V",[["^1>","^1?","^3A","^3B"]]]]]],"~$around-all",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",21,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["~$context","^X"]]]],"^Y",["^V",[["^3E","~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",162,"^11",true,"^12",162,"^Y",["^V",["^13",["^V",[["^3E","~$&","^X"]]]]],"^1@","Declares a function that is invoked once around all characteristics of the containing describe scope."],"^5","~$speclj.core/around-all","^O","resources/public/cljs/speclj/core.cljc","^P",21,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^3E","^X"]]]],"^Y",["^V",[["^3E","~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^3E","^X"]]]],"^15",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",1,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",162,"^11",true,"^1:","^1;","^12",162,"^T",1,"^1<",false,"^Y",["^V",[["^3E","~$&","^X"]]],"^1@","Declares a function that is invoked once around all characteristics of the containing describe scope."],"~$should-not-have-invoked",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",34,"^Q",["^ ","^R",false,"^S",2,"^T",2,"^U",["^V",[["^W"],["^W","~$options"]]],"^Y",["^V",[["^W"],["^W","^3H"]]],"^Z",["^V",[null,null]]],"^[",11,"^10",739,"^11",true,"^12",739,"^Y",["^V",["^13",["^V",[["^W"],["^W","^3H"]]]]],"^1@","Inverse of should-have-invoked.\n\n  Options:\n    :times - the number of times the stub should not have been invoked. nil means never. (default: nil)\n    :with - a list of arguments that the stubs should not have been invoked with.\n      If not specified, anything goes. Special expected arguments include:\n       :* - matches anything\n       a fn - matches when the actual is the same fn or calling fn with the actual argument returns true\n\n  Example:\n  (let [foo (stub :foo)]\n    (should-not-have-invoked :foo {:with [1] :times 3}) ; pass\n    (foo 1)\n    (should-not-have-invoked :foo {:with [1] :times 3}) ; pass\n    (should-not-have-invoked :foo {:with [1] :times 1}) ; fail\n    (should-not-have-invoked :foo {:times 3}) ; pass\n    (should-not-have-invoked :foo {:times 1}) ; fail\n    (should-not-have-invoked :foo {:with [1]}) ; fail\n    )"],"^5","~$speclj.core/should-not-have-invoked","^O","resources/public/cljs/speclj/core.cljc","^P",34,"^Q",["^ ","^R",false,"^S",2,"^T",2,"^U",["^V",[["^W"],["^W","^3H"]]],"^Y",["^V",[["^W"],["^W","^3H"]]],"^Z",["^V",[null,null]]],"^U",["^V",[["^W"],["^W","^3H"]]],"^15",null,"^S",2,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^16",[["^ ","^S",3,"^R",false,"^17",["^4",["^18","^19"]]],["^ ","^S",4,"^R",false,"^17",["^4",["^18","^19"]]]],"^10",739,"^11",true,"^12",739,"^T",2,"^1<",false,"^Y",["^V",[["^W"],["^W","^3H"]]],"^1@","Inverse of should-have-invoked.\n\n  Options:\n    :times - the number of times the stub should not have been invoked. nil means never. (default: nil)\n    :with - a list of arguments that the stubs should not have been invoked with.\n      If not specified, anything goes. Special expected arguments include:\n       :* - matches anything\n       a fn - matches when the actual is the same fn or calling fn with the actual argument returns true\n\n  Example:\n  (let [foo (stub :foo)]\n    (should-not-have-invoked :foo {:with [1] :times 3}) ; pass\n    (foo 1)\n    (should-not-have-invoked :foo {:with [1] :times 3}) ; pass\n    (should-not-have-invoked :foo {:with [1] :times 1}) ; fail\n    (should-not-have-invoked :foo {:times 3}) ; pass\n    (should-not-have-invoked :foo {:times 1}) ; fail\n    (should-not-have-invoked :foo {:with [1]}) ; fail\n    )"],"~$pending",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",18,"^Q",["^ ","^R",false,"^S",1,"^T",1,"^U",["^V",[[],["^1K"]]],"^Y",["^V",[[],["^1K"]]],"^Z",["^V",[null,null]]],"^[",11,"^10",647,"^11",true,"^12",647,"^Y",["^V",["^13",["^V",[[],["^1K"]]]]],"^1@","When added to a characteristic, it is marked as pending.  If a message is provided it will be printed\n  in the run report"],"^5","~$speclj.core/pending","^O","resources/public/cljs/speclj/core.cljc","^P",18,"^Q",["^ ","^R",false,"^S",1,"^T",1,"^U",["^V",[[],["^1K"]]],"^Y",["^V",[[],["^1K"]]],"^Z",["^V",[null,null]]],"^U",["^V",[[],["^1K"]]],"^15",null,"^S",1,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^16",[["^ ","^S",2,"^R",false,"^17",["^4",["^18","^19"]]],["^ ","^S",3,"^R",false,"^17",["^4",["^18","^19"]]]],"^10",647,"^11",true,"^12",647,"^T",1,"^1<",false,"^Y",["^V",[[],["^1K"]]],"^1@","When added to a characteristic, it is marked as pending.  If a message is provided it will be printed\n  in the run report"],"~$focus-context",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",24,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^1["]]]],"^Y",["^V",[["^W","~$&","^1["]]],"^Z",["^V",[null]]],"^[",11,"^10",113,"^11",true,"^12",113,"^Y",["^V",["^13",["^V",[["^W","~$&","^1["]]]]],"^1@","Same as 'context', but it is meant to facilitate temporary debugging.\n   Components defined with this macro will be fully executed along with any\n   other components thus defined, but all other sibling components defined\n   with 'context' will be ignored."],"^5","~$speclj.core/focus-context","^O","resources/public/cljs/speclj/core.cljc","^P",24,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^1["]]]],"^Y",["^V",[["^W","~$&","^1["]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^1["]]]],"^15",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",1,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",113,"^11",true,"^1:","^1;","^12",113,"^T",1,"^1<",false,"^Y",["^V",[["^W","~$&","^1["]]],"^1@","Same as 'context', but it is meant to facilitate temporary debugging.\n   Components defined with this macro will be fully executed along with any\n   other components thus defined, but all other sibling components defined\n   with 'context' will be ignored."],"~$with-all!",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",20,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",201,"^11",true,"^12",201,"^Y",["^V",["^13",["^V",[["^W","~$&","^X"]]]]],"^1@","Declares a reference-able symbol that will be immediately evaluated once per context. The body may contain any forms,\n   the last of which will be the value of the dereferenced symbol.\n\n  (def my-num (atom 0))\n  (with-all! my-with-all! (swap! my-num inc))\n  (it \"increments my-num before being accessed\"\n    (should= 1 @my-num)\n    (should= 2 @my-with!))\n  (it \"only increments my-num once per context\"\n    (should= 1 @my-num)\n    (should= 2 @my-with!))"],"^5","~$speclj.core/with-all!","^O","resources/public/cljs/speclj/core.cljc","^P",20,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^X"]]]],"^15",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",1,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",201,"^11",true,"^1:","^1;","^12",201,"^T",1,"^1<",false,"^Y",["^V",[["^W","~$&","^X"]]],"^1@","Declares a reference-able symbol that will be immediately evaluated once per context. The body may contain any forms,\n   the last of which will be the value of the dereferenced symbol.\n\n  (def my-num (atom 0))\n  (with-all! my-with-all! (swap! my-num inc))\n  (it \"increments my-num before being accessed\"\n    (should= 1 @my-num)\n    (should= 2 @my-with!))\n  (it \"only increments my-num once per context\"\n    (should= 1 @my-num)\n    (should= 2 @my-with!))"],"~$redefs-around",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",145,"^[",11,"^12",145,"^P",24,"^11",true,"^Y",["^V",["^13",["^V",[["~$bindings"]]]]],"^1@","Redefines the bindings around each characteristic of the containing describe scope."],"^5","~$speclj.core/redefs-around","^O","resources/public/cljs/speclj/core.cljc","^P",24,"^U",["^V",[["^1B","^1C","^3Q"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",145,"^11",true,"^1:",["^4",["^18","^19"]],"^12",145,"^T",3,"^1<",false,"^Y",["^V",["^13",["^V",[["^3Q"]]]]],"^1@","Redefines the bindings around each characteristic of the containing describe scope."],"~$-fail",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",219,"^[",11,"^12",219,"^P",16,"^11",true,"^Y",["^V",["^13",["^V",[["^1K"]]]]],"^1@","Useful for making custom assertions."],"^5","~$speclj.core/-fail","^O","resources/public/cljs/speclj/core.cljc","^P",16,"^U",["^V",[["^1B","^1C","^1K"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",219,"^11",true,"^1:",["^4",["^18","^19"]],"^12",219,"^T",3,"^1<",false,"^Y",["^V",["^13",["^V",[["^1K"]]]]],"^1@","Useful for making custom assertions."],"~$run-specs",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",876,"^[",11,"^12",876,"^P",20,"^11",true,"^Y",["^V",["^13",["^V",[[]]]]]],"^5","~$speclj.core/run-specs","^O","resources/public/cljs/speclj/core.cljc","^P",20,"^U",["^V",[["^1B","^1C"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",876,"^11",true,"^1:",["^4",["^18","^19"]],"^12",876,"^T",2,"^1<",false,"^Y",["^V",["^13",["^V",[[]]]]]],"~$should-not-end-with",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",496,"^[",11,"^12",496,"^P",30,"^11",true,"^Y",["^V",["^13",["^V",[["^1G","^1H"]]]]],"^1@","The inverse of should-end-with."],"^5","~$speclj.core/should-not-end-with","^O","resources/public/cljs/speclj/core.cljc","^P",30,"^U",["^V",[["^1B","^1C","^1G","^1H"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",496,"^11",true,"^1:",["^4",["^18","^19"]],"^12",496,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^1G","^1H"]]]]],"^1@","The inverse of should-end-with."],"~$should-be",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",261,"^[",11,"^12",261,"^P",20,"^11",true,"^Y",["^V",["^13",["^V",[["~$f-form","^23"]]]]],"^1@","Asserts that a form satisfies a function."],"^5","~$speclj.core/should-be","^O","resources/public/cljs/speclj/core.cljc","^P",20,"^U",["^V",[["^1B","^1C","^3Z","^23"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",261,"^11",true,"^1:",["^4",["^18","^19"]],"^12",261,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^3Z","^23"]]]]],"^1@","Asserts that a form satisfies a function."],"~$should-not-have-count",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",375,"^[",11,"^12",375,"^P",32,"^11",true,"^Y",["^V",["^13",["^V",[["^1>","^2X"]]]]],"^1@","Multipurpose assertion on (not= (count %)). Works on strings, sequences, and maps.\n\n  (should-not-have-count 1 \"foobar\")\n  (should-not-have-count 1 [1 2])\n  (should-not-have-count 42 {:foo :bar})\n  (should-not-have-count 1 [])\n  (should-not-have-count 1 nil)"],"^5","~$speclj.core/should-not-have-count","^O","resources/public/cljs/speclj/core.cljc","^P",32,"^U",["^V",[["^1B","^1C","^1>","^2X"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",375,"^11",true,"^1:",["^4",["^18","^19"]],"^12",375,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^1>","^2X"]]]]],"^1@","Multipurpose assertion on (not= (count %)). Works on strings, sequences, and maps.\n\n  (should-not-have-count 1 \"foobar\")\n  (should-not-have-count 1 [1 2])\n  (should-not-have-count 42 {:foo :bar})\n  (should-not-have-count 1 [])\n  (should-not-have-count 1 nil)"],"~$bound-by-should-invoke?",["^ ","^L",true,"^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",794,"^[",20,"^12",794,"^P",43,"^L",true,"^11",true,"^Y",["^V",["^13",["^V",[[]]]]]],"^5","~$speclj.core/bound-by-should-invoke?","^O","resources/public/cljs/speclj/core.cljc","^P",43,"^U",["^V",[["^1B","^1C"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",794,"^11",true,"^1:",["^4",["^18","^19"]],"^12",794,"^T",2,"^1<",false,"^Y",["^V",["^13",["^V",[[]]]]]],"~$stub",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",15,"^Q",["^ ","^R",false,"^S",2,"^T",2,"^U",["^V",[["^W"],["^W","^3H"]]],"^Y",["^V",[["^W"],["^W","^3H"]]],"^Z",["^V",[null,null]]],"^[",11,"^10",670,"^11",true,"^12",670,"^Y",["^V",["^13",["^V",[["^W"],["^W","^3H"]]]]],"^1@","Creates a stub function.  Each call to the stub will be recorded and can later be looked up using the specified name.\n\n  Options:\n    :invoke - a function that will be invoked when the stub is invoked.  All the arguments passed to the stub will\n      be passed to the :invoke value and its return value returned by the stub.\n    :return - a value that will be returned by the stub.  This overrides the result of the :invoke value, if specified.\n    :throw - an exception that will be thrown by the stub."],"^5","~$speclj.core/stub","^O","resources/public/cljs/speclj/core.cljc","^P",15,"^Q",["^ ","^R",false,"^S",2,"^T",2,"^U",["^V",[["^W"],["^W","^3H"]]],"^Y",["^V",[["^W"],["^W","^3H"]]],"^Z",["^V",[null,null]]],"^U",["^V",[["^W"],["^W","^3H"]]],"^15",null,"^S",2,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^16",[["^ ","^S",3,"^R",false,"^17",["^4",["^18","^19"]]],["^ ","^S",4,"^R",false,"^17",["^4",["^18","^19"]]]],"^10",670,"^11",true,"^12",670,"^T",2,"^1<",false,"^Y",["^V",[["^W"],["^W","^3H"]]],"^1@","Creates a stub function.  Each call to the stub will be recorded and can later be looked up using the specified name.\n\n  Options:\n    :invoke - a function that will be invoked when the stub is invoked.  All the arguments passed to the stub will\n      be passed to the :invoke value and its return value returned by the stub.\n    :return - a value that will be returned by the stub.  This overrides the result of the :invoke value, if specified.\n    :throw - an exception that will be thrown by the stub."],"~$should-have-invoked",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",30,"^Q",["^ ","^R",false,"^S",2,"^T",2,"^U",["^V",[["^W"],["^W","^3H"]]],"^Y",["^V",[["^W"],["^W","^3H"]]],"^Z",["^V",[null,null]]],"^[",11,"^10",681,"^11",true,"^12",681,"^Y",["^V",["^13",["^V",[["^W"],["^W","^3H"]]]]],"^1@","Checks for invocations of the specified stub.\n\n  Options:\n    :times - the number of times the stub should have been invoked. nil means at least once. (default: nil)\n    :with - a list of arguments that the stubs should have been invoked with.\n      If not specified, anything goes.  Special expected arguments include:\n       :* - matches anything\n       a fn - matches when the actual is the same fn or calling fn with the actual argument returns true\n\n  Example:\n  (let [foo (stub :foo)]\n    (should-have-invoked :foo {:with [1] :times 3}) ; fail\n    (foo 1)\n    (foo 2)\n    (should-have-invoked :foo {:with [1] :times 3}) ; fail\n    (should-have-invoked :foo {:with [1] :times 1}) ; pass\n    (should-have-invoked :foo {:with [2] :times 1}) ; pass\n    (should-have-invoked :foo {:times 3}) ; fail\n    (should-have-invoked :foo {:times 2}) ; pass\n    (should-have-invoked :foo {:times 1}) ; fail\n    (should-have-invoked :foo {:with [1]}) ; pass\n    (should-have-invoked :foo {:with [2]}) ; pass\n    )"],"^5","~$speclj.core/should-have-invoked","^O","resources/public/cljs/speclj/core.cljc","^P",30,"^Q",["^ ","^R",false,"^S",2,"^T",2,"^U",["^V",[["^W"],["^W","^3H"]]],"^Y",["^V",[["^W"],["^W","^3H"]]],"^Z",["^V",[null,null]]],"^U",["^V",[["^W"],["^W","^3H"]]],"^15",null,"^S",2,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^16",[["^ ","^S",3,"^R",false,"^17",["^4",["^18","^19"]]],["^ ","^S",4,"^R",false,"^17",["^4",["^18","^19"]]]],"^10",681,"^11",true,"^12",681,"^T",2,"^1<",false,"^Y",["^V",[["^W"],["^W","^3H"]]],"^1@","Checks for invocations of the specified stub.\n\n  Options:\n    :times - the number of times the stub should have been invoked. nil means at least once. (default: nil)\n    :with - a list of arguments that the stubs should have been invoked with.\n      If not specified, anything goes.  Special expected arguments include:\n       :* - matches anything\n       a fn - matches when the actual is the same fn or calling fn with the actual argument returns true\n\n  Example:\n  (let [foo (stub :foo)]\n    (should-have-invoked :foo {:with [1] :times 3}) ; fail\n    (foo 1)\n    (foo 2)\n    (should-have-invoked :foo {:with [1] :times 3}) ; fail\n    (should-have-invoked :foo {:with [1] :times 1}) ; pass\n    (should-have-invoked :foo {:with [2] :times 1}) ; pass\n    (should-have-invoked :foo {:times 3}) ; fail\n    (should-have-invoked :foo {:times 2}) ; pass\n    (should-have-invoked :foo {:times 1}) ; fail\n    (should-have-invoked :foo {:with [1]}) ; pass\n    (should-have-invoked :foo {:with [2]}) ; pass\n    )"],"~$should-have-count",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",355,"^[",11,"^12",355,"^P",28,"^11",true,"^Y",["^V",["^13",["^V",[["^1>","^2X"]]]]],"^1@","Multipurpose assertion on (count %). Works on strings, sequences, and maps.\n\n  (should-have-count 6 \"foobar\")\n  (should-have-count 2 [1 2])\n  (should-have-count 1 {:foo :bar})\n  (should-have-count 0 [])\n  (should-have-count 0 nil)"],"^5","~$speclj.core/should-have-count","^O","resources/public/cljs/speclj/core.cljc","^P",28,"^U",["^V",[["^1B","^1C","^1>","^2X"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",355,"^11",true,"^1:",["^4",["^18","^19"]],"^12",355,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^1>","^2X"]]]]],"^1@","Multipurpose assertion on (count %). Works on strings, sequences, and maps.\n\n  (should-have-count 6 \"foobar\")\n  (should-have-count 2 [1 2])\n  (should-have-count 1 {:foo :bar})\n  (should-have-count 0 [])\n  (should-have-count 0 nil)"],"~$should-not-be-same",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",293,"^[",11,"^12",293,"^P",29,"^11",true,"^Y",["^V",["^13",["^V",[["^2<","^23"]]]]],"^1@","Asserts that two forms evaluate to different objects, with the unexpected value as the first parameter."],"^5","~$speclj.core/should-not-be-same","^O","resources/public/cljs/speclj/core.cljc","^P",29,"^U",["^V",[["^1B","^1C","^2<","^23"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",293,"^11",true,"^1:",["^4",["^18","^19"]],"^12",293,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^2<","^23"]]]]],"^1@","Asserts that two forms evaluate to different objects, with the unexpected value as the first parameter."],"~$it",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",13,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",67,"^11",true,"^12",67,"^Y",["^V",["^13",["^V",[["^W","~$&","^X"]]]]],"^1@","body => any forms, but should contain at least one assertion (should)\n\n  Declares a new characteristic (example in rspec)."],"^5","~$speclj.core/it","^O","resources/public/cljs/speclj/core.cljc","^P",13,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^X"]]]],"^15",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",1,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",67,"^11",true,"^1:","^1;","^12",67,"^T",1,"^1<",false,"^Y",["^V",[["^W","~$&","^X"]]],"^1@","body => any forms, but should contain at least one assertion (should)\n\n  Declares a new characteristic (example in rspec)."],"~$before-all",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",21,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["^X"]]]],"^Y",["^V",[["~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",150,"^11",true,"^12",150,"^Y",["^V",["^13",["^V",[["~$&","^X"]]]]],"^1@","Declares a function that is invoked once before any characteristic in the containing describe scope is evaluated. The\n  body may consist of any forms, presumably ones that perform side effects."],"^5","~$speclj.core/before-all","^O","resources/public/cljs/speclj/core.cljc","^P",21,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["^X"]]]],"^Y",["^V",[["~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^X"]]]],"^15",null,"^S",0,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",0,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",150,"^11",true,"^1:","^1;","^12",150,"^T",0,"^1<",false,"^Y",["^V",[["~$&","^X"]]],"^1@","Declares a function that is invoked once before any characteristic in the containing describe scope is evaluated. The\n  body may consist of any forms, presumably ones that perform side effects."],"~$should>",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",849,"^[",11,"^12",849,"^P",18,"^11",true,"^Y",["^V",["^13",["^V",[["~$a","~$b"]]]]],"^1@","Asserts that the first numeric form is greater than the second numeric form, using the built-in > function."],"^5","~$speclj.core/should>","^O","resources/public/cljs/speclj/core.cljc","^P",18,"^U",["^V",[["^1B","^1C","~$a","~$b"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",849,"^11",true,"^1:",["^4",["^18","^19"]],"^12",849,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["~$a","~$b"]]]]],"^1@","Asserts that the first numeric form is greater than the second numeric form, using the built-in > function."],"~$should-invoke",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",24,"^Q",["^ ","^R",true,"^S",2,"^T",2,"^U",["^V",[["^V",["~$var","^3H","^X"]]]],"^Y",["^V",[["^4C","^3H","~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",807,"^11",true,"^12",807,"^Y",["^V",["^13",["^V",[["^4C","^3H","~$&","^X"]]]]],"^1@","Creates a stub, and binds it to the specified var, evaluates the body, and checks the invocations.\n\n  (should-invoke reverse {:with [1 2 3] :return []} (reverse [1 2 3]))\n\n  See stub and should-have-invoked for valid options."],"^5","~$speclj.core/should-invoke","^O","resources/public/cljs/speclj/core.cljc","^P",24,"^Q",["^ ","^R",true,"^S",2,"^T",2,"^U",["^V",[["^V",["^4C","^3H","^X"]]]],"^Y",["^V",[["^4C","^3H","~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^4C","^3H","^X"]]]],"^15",null,"^S",2,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",2,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",807,"^11",true,"^1:","^1;","^12",807,"^T",2,"^1<",false,"^Y",["^V",[["^4C","^3H","~$&","^X"]]],"^1@","Creates a stub, and binds it to the specified var, evaluates the body, and checks the invocations.\n\n  (should-invoke reverse {:with [1 2 3] :return []} (reverse [1 2 3]))\n\n  See stub and should-have-invoked for valid options."],"~$-to-s",["^ ","^L",true,"^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",216,"^[",20,"^12",216,"^P",25,"^L",true,"^11",true,"^Y",["^V",["^13",["^V",[["~$thing"]]]]]],"^5","~$speclj.core/-to-s","^O","resources/public/cljs/speclj/core.cljc","^P",25,"^U",["^V",[["^1B","^1C","^4F"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",216,"^11",true,"^1:",["^4",["^18","^19"]],"^12",216,"^T",3,"^1<",false,"^Y",["^V",["^13",["^V",[["^4F"]]]]]],"~$after",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",16,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["^X"]]]],"^Y",["^V",[["~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",127,"^11",true,"^12",127,"^Y",["^V",["^13",["^V",[["~$&","^X"]]]]],"^1@","Declares a function that is invoked after each characteristic in the containing describe scope is evaluated. The body\n  may consist of any forms, presumably ones that perform side effects."],"^5","~$speclj.core/after","^O","resources/public/cljs/speclj/core.cljc","^P",16,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["^X"]]]],"^Y",["^V",[["~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^X"]]]],"^15",null,"^S",0,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",0,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",127,"^11",true,"^1:","^1;","^12",127,"^T",0,"^1<",false,"^Y",["^V",[["~$&","^X"]]],"^1@","Declares a function that is invoked after each characteristic in the containing describe scope is evaluated. The body\n  may consist of any forms, presumably ones that perform side effects."],"~$should-not",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",239,"^[",11,"^12",239,"^P",21,"^11",true,"^Y",["^V",["^13",["^V",[["^26"]]]]],"^1@","Asserts the falsy-ness of a form"],"^5","~$speclj.core/should-not","^O","resources/public/cljs/speclj/core.cljc","^P",21,"^U",["^V",[["^1B","^1C","^26"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",239,"^11",true,"^1:",["^4",["^18","^19"]],"^12",239,"^T",3,"^1<",false,"^Y",["^V",["^13",["^V",[["^26"]]]]],"^1@","Asserts the falsy-ness of a form"],"~$should-not-throw",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",617,"^[",11,"^12",617,"^P",27,"^11",true,"^Y",["^V",["^13",["^V",[["^26"]]]]],"^1@","Asserts that nothing is thrown by the evaluation of a form."],"^5","~$speclj.core/should-not-throw","^O","resources/public/cljs/speclj/core.cljc","^P",27,"^U",["^V",[["^1B","^1C","^26"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",617,"^11",true,"^1:",["^4",["^18","^19"]],"^12",617,"^T",3,"^1<",false,"^Y",["^V",["^13",["^V",[["^26"]]]]],"^1@","Asserts that nothing is thrown by the evaluation of a form."],"~$should<",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",840,"^[",11,"^12",840,"^P",18,"^11",true,"^Y",["^V",["^13",["^V",[["~$a","~$b"]]]]],"^1@","Asserts that the first numeric form is less than the second numeric form, using the built-in < function."],"^5","~$speclj.core/should<","^O","resources/public/cljs/speclj/core.cljc","^P",18,"^U",["^V",[["^1B","^1C","~$a","~$b"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",840,"^11",true,"^1:",["^4",["^18","^19"]],"^12",840,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["~$a","~$b"]]]]],"^1@","Asserts that the first numeric form is less than the second numeric form, using the built-in < function."],"~$should-be-same",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",285,"^[",11,"^12",285,"^P",25,"^11",true,"^Y",["^V",["^13",["^V",[["^2<","^23"]]]]],"^1@","Asserts that two forms evaluate to the same object, with the expected value as the first parameter."],"^5","~$speclj.core/should-be-same","^O","resources/public/cljs/speclj/core.cljc","^P",25,"^U",["^V",[["^1B","^1C","^2<","^23"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",285,"^11",true,"^1:",["^4",["^18","^19"]],"^12",285,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^2<","^23"]]]]],"^1@","Asserts that two forms evaluate to the same object, with the expected value as the first parameter."],"~$with",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",15,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",173,"^11",true,"^12",173,"^Y",["^V",["^13",["^V",[["^W","~$&","^X"]]]]],"^1@","Declares a reference-able symbol that will be lazily evaluated once per characteristic of the containing\n  describe scope.  The body may contain any forms, the last of which will be the value of the dereferenced symbol.\n\n  (with meaning 42)\n  (it \"knows the meaning of life\" (should= @meaning (the-meaning-of :life)))"],"^5","~$speclj.core/with","^O","resources/public/cljs/speclj/core.cljc","^P",15,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^X"]]]],"^15",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",1,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",173,"^11",true,"^1:","^1;","^12",173,"^T",1,"^1<",false,"^Y",["^V",[["^W","~$&","^X"]]],"^1@","Declares a reference-able symbol that will be lazily evaluated once per characteristic of the containing\n  describe scope.  The body may contain any forms, the last of which will be the value of the dereferenced symbol.\n\n  (with meaning 42)\n  (it \"knows the meaning of life\" (should= @meaning (the-meaning-of :life)))"],"~$-new-throwable",["^ ","^L",true,"^M",null,"^N",["^ ","^L",true,"^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",37,"^Q",["^ ","^R",false,"^S",1,"^T",1,"^U",["^V",[[],["^1K"]]],"^Y",["^V",[[],["^1K"]]],"^Z",["^V",[null,null]]],"^[",23,"^10",36,"^11",true,"^12",36,"^Y",["^V",["^13",["^V",[[],["^1K"]]]]]],"^5","~$speclj.core/-new-throwable","^O","resources/public/cljs/speclj/core.cljc","^P",37,"^Q",["^ ","^R",false,"^S",1,"^T",1,"^U",["^V",[[],["^1K"]]],"^Y",["^V",[[],["^1K"]]],"^Z",["^V",[null,null]]],"^U",["^V",[[],["^1K"]]],"^15",null,"^S",1,"^Z",["^V",[null,null]],"^[",4,"^R",false,"^16",[["^ ","^S",2,"^R",false,"^17",["^4",["^18","^19"]]],["^ ","^S",3,"^R",false,"^17",["^4",["^18","^19"]]]],"^10",36,"^11",true,"^12",36,"^T",1,"^1<",false,"^Y",["^V",[[],["^1K"]]]],"~$-new-exception",["^ ","^L",true,"^M",null,"^N",["^ ","^L",true,"^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",34,"^Q",["^ ","^R",false,"^S",2,"^T",2,"^U",["^V",[[],["^1K"],["^1K","~$cause"]]],"^Y",["^V",[[],["^1K"],["^1K","^4W"]]],"^Z",["^V",[null,null,null]]],"^[",20,"^10",25,"^11",true,"^12",25,"^Y",["^V",["^13",["^V",[[],["^1K"],["^1K","^4W"]]]]]],"^5","~$speclj.core/-new-exception","^O","resources/public/cljs/speclj/core.cljc","^P",34,"^Q",["^ ","^R",false,"^S",2,"^T",2,"^U",["^V",[[],["^1K"],["^1K","^4W"]]],"^Y",["^V",[[],["^1K"],["^1K","^4W"]]],"^Z",["^V",[null,null,null]]],"^U",["^V",[[],["^1K"],["^1K","^4W"]]],"^15",null,"^S",2,"^Z",["^V",[null,null,null]],"^[",1,"^R",false,"^16",[["^ ","^S",2,"^R",false,"^17",["^4",["^18","^19"]]],["^ ","^S",3,"^R",false,"^17",["^4",["^18","^19"]]],["^ ","^S",4,"^R",false,"^17",["^4",["^18","^19"]]]],"^10",25,"^11",true,"^12",25,"^T",2,"^1<",false,"^Y",["^V",[[],["^1K"],["^1K","^4W"]]]],"~$-create-should-throw-failure",["^ ","^L",true,"^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",577,"^[",20,"^12",577,"^P",48,"^L",true,"^11",true,"^Y",["^V",["^13",["^V",[["^1>","^1?","~$expr"]]]]]],"^5","~$speclj.core/-create-should-throw-failure","^O","resources/public/cljs/speclj/core.cljc","^P",48,"^U",["^V",[["^1B","^1C","^1>","^1?","^4Z"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",577,"^11",true,"^1:",["^4",["^18","^19"]],"^12",577,"^T",5,"^1<",false,"^Y",["^V",["^13",["^V",[["^1>","^1?","^4Z"]]]]]],"~$describe",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",19,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^1["]]]],"^Y",["^V",[["^W","~$&","^1["]]],"^Z",["^V",[null]]],"^[",11,"^10",92,"^11",true,"^12",92,"^Y",["^V",["^13",["^V",[["^W","~$&","^1["]]]]],"^1@","body => & spec-components\n\n  Declares a new spec.  The body can contain any forms that evaluate to spec components (it, before, after, with ...)."],"^5","~$speclj.core/describe","^O","resources/public/cljs/speclj/core.cljc","^P",19,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^1["]]]],"^Y",["^V",[["^W","~$&","^1["]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^1["]]]],"^15",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",1,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",92,"^11",true,"^1:","^1;","^12",92,"^T",1,"^1<",false,"^Y",["^V",[["^W","~$&","^1["]]],"^1@","body => & spec-components\n\n  Declares a new spec.  The body can contain any forms that evaluate to spec components (it, before, after, with ...)."],"~$should-be-nil",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",301,"^[",11,"^12",301,"^P",24,"^11",true,"^Y",["^V",["^13",["^V",[["^26"]]]]],"^1@","Asserts that the form evaluates to nil"],"^5","~$speclj.core/should-be-nil","^O","resources/public/cljs/speclj/core.cljc","^P",24,"^U",["^V",[["^1B","^1C","^26"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",301,"^11",true,"^1:",["^4",["^18","^19"]],"^12",301,"^T",3,"^1<",false,"^Y",["^V",["^13",["^V",[["^26"]]]]],"^1@","Asserts that the form evaluates to nil"],"~$should>=",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",867,"^[",11,"^12",867,"^P",19,"^11",true,"^Y",["^V",["^13",["^V",[["~$a","~$b"]]]]],"^1@","Asserts that the first numeric form is greater than or equal to the second numeric form, using the built-in >= function."],"^5","~$speclj.core/should>=","^O","resources/public/cljs/speclj/core.cljc","^P",19,"^U",["^V",[["^1B","^1C","~$a","~$b"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",867,"^11",true,"^1:",["^4",["^18","^19"]],"^12",867,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["~$a","~$b"]]]]],"^1@","Asserts that the first numeric form is greater than or equal to the second numeric form, using the built-in >= function."],"^3E",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",18,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^1["]]]],"^Y",["^V",[["^W","~$&","^1["]]],"^Z",["^V",[null]]],"^[",11,"^10",107,"^11",true,"^12",107,"^Y",["^V",["^13",["^V",[["^W","~$&","^1["]]]]],"^1@","Same as describe, but should be used to nest testing contexts inside the outer describe.\n  Contexts can be nested any number of times."],"^5","~$speclj.core/context","^O","resources/public/cljs/speclj/core.cljc","^P",18,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^1["]]]],"^Y",["^V",[["^W","~$&","^1["]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^1["]]]],"^15",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",1,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",107,"^11",true,"^1:","^1;","^12",107,"^T",1,"^1<",false,"^Y",["^V",[["^W","~$&","^1["]]],"^1@","Same as describe, but should be used to nest testing contexts inside the outer describe.\n  Contexts can be nested any number of times."],"~$*bound-by-should-invoke*",["^ ","^L",true,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",792,"^[",25,"^12",792,"^P",49,"^L",true,"~:dynamic",true],"^5","~$speclj.core/*bound-by-should-invoke*","^O","resources/public/cljs/speclj/core.cljc","^P",49,"^[",1,"^58",true,"^10",792,"^12",792,"^17","^1;"],"~$should-not-be",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",269,"^[",11,"^12",269,"^P",24,"^11",true,"^Y",["^V",["^13",["^V",[["^3Z","^23"]]]]],"^1@","Asserts that a form does not satisfy a function."],"^5","~$speclj.core/should-not-be","^O","resources/public/cljs/speclj/core.cljc","^P",24,"^U",["^V",[["^1B","^1C","^3Z","^23"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",269,"^11",true,"^1:",["^4",["^18","^19"]],"^12",269,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^3Z","^23"]]]]],"^1@","Asserts that a form does not satisfy a function."],"~$focus-it",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",19,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",79,"^11",true,"^12",79,"^Y",["^V",["^13",["^V",[["^W","~$&","^X"]]]]],"^1@","Same as 'it', but it is meant to facilitate temporary debugging.\n  Characteristics defined with this macro will be executed along with any\n  other characteristics thus defined, but all other characteristic defined\n  with 'it' will be ignored."],"^5","~$speclj.core/focus-it","^O","resources/public/cljs/speclj/core.cljc","^P",19,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^X"]]]],"^15",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",1,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",79,"^11",true,"^1:","^1;","^12",79,"^T",1,"^1<",false,"^Y",["^V",[["^W","~$&","^X"]]],"^1@","Same as 'it', but it is meant to facilitate temporary debugging.\n  Characteristics defined with this macro will be executed along with any\n  other characteristics thus defined, but all other characteristic defined\n  with 'it' will be ignored."],"~$should-not-invoke",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",28,"^Q",["^ ","^R",true,"^S",2,"^T",2,"^U",["^V",[["^V",["^4C","^3H","^X"]]]],"^Y",["^V",[["^4C","^3H","~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",823,"^11",true,"^12",823,"^Y",["^V",["^13",["^V",[["^4C","^3H","~$&","^X"]]]]],"^1@","Creates a stub, and binds it to the specified var, evaluates the body, and checks that it was NOT invoked.\n\n  (should-not-invoke reverse {:with [1 2 3] :return [] :times 2} (reverse [1 2 3])) ; pass\n  (should-not-invoke reverse {:with [1 2 3] :return []} (reverse [1 2 3])) ; fail\n\n  See stub and should-not-have-invoked for valid options."],"^5","~$speclj.core/should-not-invoke","^O","resources/public/cljs/speclj/core.cljc","^P",28,"^Q",["^ ","^R",true,"^S",2,"^T",2,"^U",["^V",[["^V",["^4C","^3H","^X"]]]],"^Y",["^V",[["^4C","^3H","~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^4C","^3H","^X"]]]],"^15",null,"^S",2,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",2,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",823,"^11",true,"^1:","^1;","^12",823,"^T",2,"^1<",false,"^Y",["^V",[["^4C","^3H","~$&","^X"]]],"^1@","Creates a stub, and binds it to the specified var, evaluates the body, and checks that it was NOT invoked.\n\n  (should-not-invoke reverse {:with [1 2 3] :return [] :times 2} (reverse [1 2 3])) ; pass\n  (should-not-invoke reverse {:with [1 2 3] :return []} (reverse [1 2 3])) ; fail\n\n  See stub and should-not-have-invoked for valid options."],"~$with-stubbed-invocations",["^ ","^L",true,"^M",null,"^N",["^ ","^L",true,"^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",44,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["^X"]]]],"^Y",["^V",[["~$&","^X"]]],"^Z",["^V",[null]]],"^[",20,"^10",800,"^11",true,"^12",800,"^Y",["^V",["^13",["^V",[["~$&","^X"]]]]]],"^5","~$speclj.core/with-stubbed-invocations","^O","resources/public/cljs/speclj/core.cljc","^P",44,"^Q",["^ ","^R",true,"^S",0,"^T",0,"^U",["^V",[["^V",["^X"]]]],"^Y",["^V",[["~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^X"]]]],"^15",null,"^S",0,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",0,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",800,"^11",true,"^1:","^1;","^12",800,"^T",0,"^1<",false,"^Y",["^V",[["~$&","^X"]]]],"~$with-all",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^P",19,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^[",11,"^10",192,"^11",true,"^12",192,"^Y",["^V",["^13",["^V",[["^W","~$&","^X"]]]]],"^1@","Declares a reference-able symbol that will be lazily evaluated once per context. The body may contain any forms,\n   the last of which will be the value of the dereferenced symbol.\n\n  (with-all meaning 42)\n  (it \"knows the meaning of life\" (should= @meaning (the-meaning-of :life)))"],"^5","~$speclj.core/with-all","^O","resources/public/cljs/speclj/core.cljc","^P",19,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^V",[["^V",["^W","^X"]]]],"^Y",["^V",[["^W","~$&","^X"]]],"^Z",["^V",[null]]],"^U",["^V",[["^V",["^W","^X"]]]],"^15",null,"^S",1,"^Z",["^V",[null]],"^[",1,"^R",true,"^16",[["^ ","^S",1,"^R",true,"^17",["^4",["^18","^19"]]]],"^10",192,"^11",true,"^1:","^1;","^12",192,"^T",1,"^1<",false,"^Y",["^V",[["^W","~$&","^X"]]],"^1@","Declares a reference-able symbol that will be lazily evaluated once per context. The body may contain any forms,\n   the last of which will be the value of the dereferenced symbol.\n\n  (with-all meaning 42)\n  (it \"knows the meaning of life\" (should= @meaning (the-meaning-of :life)))"],"~$should-start-with",["^ ","^M",null,"^N",["^ ","^O","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/speclj/core.cljc","^10",418,"^[",11,"^12",418,"^P",28,"^11",true,"^Y",["^V",["^13",["^V",[["^1G","^1H"]]]]],"^1@","Assertion of prefix in strings and sequences.\n\n  (should-start-with \"foo\" \"foobar\")            ; looks for string prefix\n  (should-start-with [1 2] [1 2 3 4])               ; looks for a subset at start of collection"],"^5","~$speclj.core/should-start-with","^O","resources/public/cljs/speclj/core.cljc","^P",28,"^U",["^V",[["^1B","^1C","^1G","^1H"]]],"^15",null,"^Z",["^V",[null,null]],"^[",1,"^R",false,"^10",418,"^11",true,"^1:",["^4",["^18","^19"]],"^12",418,"^T",4,"^1<",false,"^Y",["^V",["^13",["^V",[["^1G","^1H"]]]]],"^1@","Assertion of prefix in strings and sequences.\n\n  (should-start-with \"foo\" \"foobar\")            ; looks for string prefix\n  (should-start-with [1 2] [1 2 3 4])               ; looks for a subset at start of collection"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$cljs.core/==","~$b__8473__auto__","~$cljs.core/some?","~$it__7473__auto__","~$extra__8139__auto__","~$speclj.components/new-tag","~$times__8357__auto__","~$speclj.running/submit-description","~$cljs.core/rest","~$Exception.","~$b__8446__auto__","~$cljs.core/str","~$cljs.core/<","~$cljs.core/re-seq","~$expected__7968__auto__","~$actual__7992__auto__","~$clojure.string/starts-with?","~$cljs.core/>","~$cljs.core/doseq","~$actual__7936__auto__","~$cljs.core/when","~$cljs.core/with-redefs","~$whole__8102__auto__","~$cljs.core/binding","~$expected__7949__auto__","^4=","~$expected__7907__auto__","^3C","~$actual__8164__auto__","^3;","^4G","^3K","~$cljs.core/filter","~$p1__8351__8365__auto__","~$cljs.core/=","~$with__8297__auto__","~$p1__8289__8302__auto__","~$expected__7943__auto__","~$cljs.core/ifn?","~$f__8219__auto__","~$speclj.error/pending","^2V","~$actual__8064__auto__","~$seen__8068__auto__","~$expected-type__8245__auto__","~$expected__8187__auto__","~$expected__8035__auto__","~$clojure.string/index-of","~$actual__8188__auto__","~$missing__8099__auto__","~:else","~$a__8445__auto__","~$speclj.platform/*bound-by-should-invoke*","^2Z","~$missing__8141__auto__","~$cljs.core/count","~$padding__8115__auto__","~$v__7593__auto__","~$cljs.core/seq","~$cljs.core/apply","~$p1__8352__8367__auto__","~$f__7935__auto__","~$expected-type__8239__auto__","^20","~$cljs.core/take","~$speclj.platform/error-message","~$cljs.core/mapv","^4[","^51","~$it__8272__auto__","~$cljs.core/string?","~$speclj.config/active-runner","~$cljs.core/when-not","~$matching-count__8303__auto__","~$speclj.components/new-description","^4X","~$cljs.core/atom","~$expected__8007__auto__","~$java.lang.Throwable.","~$speclj.components/inc-assertions!","^2=","~$match-with__8074__auto__","~$cljs.core/concat","~$actual__8038__auto__","~$actual__8243__auto__","~$speclj.platform/throwable","~$cljs.core/pr-str","~$type-b__7802__auto__","~$prefix__8101__auto__","~$speclj.stub/*stubbed-invocations*","^59","^47","~:times","^5A","~$actual__7913__auto__","~$expected__7991__auto__","~$speclj.config/*parent-description*","~$clojure.string/ends-with?","~:type","^3I","~$extra__8117__auto__","~$f__8069__auto__","~$speclj.core/try-catch-anything","~$do","~$cljs.core/empty?","~$speclj.platform/difference-greater-than-delta?","~$speclj.stub/invocations-of","~$name__8291__auto__","~$cljs.core/-","~$cljs.core/contains?","~$p1__8287__8299__auto__","~$cljs.core/map?","~$cljs.core/conj","~$speclj.components/new-with","~$speclj.platform/bound-by-should-invoke?","~$component__7339__auto__","~$invocations__8293__auto__","^1P","~$cljs.core/if-some","~$cljs.core/identical?","~$extra__8165__auto__","~$matching-invocations__8366__auto__","~$extra__8190__auto__","~$add-s__8364__auto__","~$if","~$delta__7914__auto__","~$speclj.components/new-with-all","~$r__8078__auto__","~$actual__7944__auto__","~$actual__7908__auto__","~$p1__8006__8009__auto__","~$expected-name__8201__auto__","~$coll__8062__auto__","~$p1__7988__7993__auto__","~$whole__8096__auto__","~$cljs.core/let","~$description__7338__auto__","^27","~$actual__8097__auto__","~$options__8429__auto__","~$cljs.core/number?","~$cljs.core/cond","~$clojure.data/diff","~$actual__8008__auto__","~$times__8294__auto__","^2:","~$prefix__8095__auto__","~$expected__7912__auto__","~$speclj.components/new-around-all","~$predicate__8218__auto__","~$cljs.core/loop","~$speclj.error/failure","~$type-a__7801__auto__","^58","~$diff__8076__auto__","^2@","~$a__7799__auto__","~$speclj.cli","~$expected__8061__auto__","~$fn*","~$e__8234__auto__","~$thing__7756__auto__","~$cljs.core/when-let","~$expected__8163__auto__","~$recur","~$cljs.core/<=","~$speclj.components/new-after-all","~:with","~$speclj.components/install","~$e__8216__auto__","~$cljs.core/declare","~$js/Error.","~$coll__8067__auto__","~$cljs.core/re-find","~$actual__8116__auto__","~$check-params?__8296__auto__","~$coll__8036__auto__","~$speclj.stub/params-match?","~$f__8077__auto__","~$speclj.platform/re?","~$cljs.core/nil?","~$cljs.core/require","~$cljs.core/ex-info","~$speclj.error/failure?","~$speclj.platform/endl","~$cljs.core/fn","^1L","~$expected-gaps__8203__auto__","~$speclj.core/bound?","~$speclj.components/new-before-all","~$actual__7950__auto__","~$a__8472__auto__","~$missing__8105__auto__","~$options__8418__auto__","~$value__8066__auto__","~$whole__8134__auto__","~$b__8458__auto__","~$check-params?__8359__auto__","~$e__8217__auto__","~$js/Object.","~$a__8466__auto__","~$speclj.platform/type-name","~$cljs.core/not","~$cljs.core/if-not","~$with__8360__auto__","~$speclj.components/new-characteristic","~$actual__8103__auto__","~$set!","~$b__8467__auto__","~$speclj.components/new-before","~$padding__8135__auto__","^34","~$cljs.core/comment","~$matching-invocations__8301__auto__","^36","^4C","^13","~$actual-type__8244__auto__","^39","~$value__7890__auto__","~$whole__8114__auto__","~$cljs.core/coll?","~$actual-string__8204__auto__","^2J","~$speclj.components/new-after","~$options__8355__auto__","~$cljs.core/isa?","~$cljs.core/and","~$catch","~$cljs.core/repeat","~$actual__7969__auto__","~$p1__8071__8079__auto__","~$suffix__8113__auto__","~$name__8354__auto__","~$speclj.stub/stub","~$speclj.components/new-around","~$cljs.core/take-last","~$matching-count__8368__auto__","^2M","~$invocations__8356__auto__","~$cljs.core/first","~$extra__8104__auto__","~$b__7800__auto__","~$a__8457__auto__","~$p1__8353__8371__auto__","~$cljs.core/>=","~$coll1__8072__auto__","~$cljs.core/counted?","~$p1__8290__8304__auto__","~$cljs.core/if-let","~$actual-type__8238__auto__","~$cljs.core/or","~$value__7856__auto__","~$prefix__8133__auto__","~$actual__8205__auto__","~$match-against__8075__auto__","~$actual__8138__auto__","~$throw","~$missing__8191__auto__","~$coll2__8073__auto__","~$invocations-str__8298__auto__","~$speclj.core/if-cljs","~$cljs.core/vector","~$cljs.core/type","~$missing__8166__auto__","~$f__7940__auto__","~$cljs.core/instance?","~$extra__8098__auto__","~$times?__8295__auto__","~$missing__8118__auto__","~$cljs.core/some","~$speclj.run.standard/run-specs","~$options__8292__auto__","~$speclj.core/find-var","~$actual__7941__auto__","~$times?__8358__auto__","~$actual__8237__auto__","^3T"]],"~:order",["^:V","^90","^5S","^9K","^75","^9;","^7E","^8J","^6A","^9Q","^9>","^3K","^8<","^8=","^72","^65","^7C","^60","^7U","^:W","^8Y","^70","^9@","^4C","^5Q","^6[","^7I","^76","^2V","^4=","^;6","^13","^2M","^51","^20","^9U","^:2","^:=","^2:","^5M","^63","^9A","^8W","^8G","^58","^8[","^6P","^9S","^7S","^83","^7W","^8R","^7<","^:R","^1L","^8M","^:C","^8K","^81","^99","^9M","^:X","^7=","^5U","^3;","^:M","^3T","^4G","^8S","^9Z","^67","^86","^6;","^9=","^8F","^7A","^82","^62","^7K","^6T","^61","^:Z","^;7","^6>","^85","^66","^9B","^7X","^5X","^:8","^39","^7B","^5Y","^8A","^:5","^6Z","^6G","^98","^7J","^5W","^7Q","^7O","^:0","^;3","^8P","^8:","^6J","^4X","^2@","^74","^8C","^5L","^6Q","^87","^6F","^95","^9O","^8@","^:L","^:H","^79","^6N","^8O","^89","^6B","^9F","^8I","^91","^6C","^7G","^:A","^78","^5R","^8U","^7R","^:G","^:T","^8B","^77","^:P","^8L","^97","^84","^:9","^2Z","^8E","^8;","^5Z","^8>","^6V","^;0","^1P","^6I","^7>","^64","^9R","^:B","^9D","^::","^9[","^7D","^6O","^6R","^:7","^7N","^93","^:>","^7F","^;2","^:N","^9G","^9V","^:Q","^5N","^6M","^8T","^68","^7Y","^:Y","^3C","^5J","^6E","^6H","^7[","^:S","^9N","^2=","^34","^88","^9?","^:1","^:J","^:O","^2J","^7;","^7H","^4[","^:6","^8Z","^9<","^:[","^9J","^8H","^27","^92","^6W","^6?","^6@","^8Q","^;9","^:K","^6U","^:4","^7:","^9Y","^6D","^36","^6X","^5O","^6Y","^7?","^73","^:<","^47","^7M","^;5","^7V","^7L","^8D","^7@","^;1","^94","^8X","^6<","^:U","^7P","^9X","^69","^6=","^96","^71","^:I","^3I","^:;","^:3","^:@","^5P","^;8","^9I","^9P","^80","^6:","^7Z","^6S","^:?","^:E","^59","^7T","^6L","^9E","^5A","^8?","^6K","^5T","^5V","^:D","^9H","^5[","^9L","^9T","^8V","^9C","^5K","^:F","^9W","^9:","^8N","^;4"]],"^1@","Speclj's API. It contains nothing but macros, so that it can be used\n  in both Clojure and ClojureScript.","~:as-aliases",["^ "]]