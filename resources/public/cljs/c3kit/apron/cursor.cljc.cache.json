["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$c3kit.apron.cursor","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$do-swap!",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/c3kit/apron/cursor.cljc","~:line",7,"~:column",8,"~:end-line",7,"~:end-column",16,"~:private",true,"~:arglists",["~#list",["~$quote",["^F",[["~$base","~$path","~$f"],["^H","^I","~$f","~$x"],["^H","^I","~$f","~$x","~$y"],["^H","^I","~$f","~$x","~$y","~$more"]]]]],"~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",6,"~:max-fixed-arity",6,"~:method-params",[["^H","^I","~$f"],["^H","^I","~$f","~$x"],["^H","^I","~$f","~$x","~$y"],["^H","^I","~$f","~$x","~$y","^J"]],"^E",["^F",[["^H","^I","~$f"],["^H","^I","~$f","~$x"],["^H","^I","~$f","~$x","~$y"],["^H","^I","~$f","~$x","~$y","^J"]]],"~:arglists-meta",["^F",[null,null,null,null]]]],"^D",true,"^5","~$c3kit.apron.cursor/do-swap!","^?","resources/public/cljs/c3kit/apron/cursor.cljc","^C",16,"^K",["^ ","^L",false,"^M",6,"^N",6,"^O",[["^H","^I","~$f"],["^H","^I","~$f","~$x"],["^H","^I","~$f","~$x","~$y"],["^H","^I","~$f","~$x","~$y","^J"]],"^E",["^F",[["^H","^I","~$f"],["^H","^I","~$f","~$x"],["^H","^I","~$f","~$x","~$y"],["^H","^I","~$f","~$x","~$y","^J"]]],"^P",["^F",[null,null,null,null]]],"^O",[["^H","^I","~$f"],["^H","^I","~$f","~$x"],["^H","^I","~$f","~$x","~$y"],["^H","^I","~$f","~$x","~$y","^J"]],"~:protocol-impl",null,"^M",6,"^P",["^F",[null,null,null,null]],"^A",1,"^L",false,"~:methods",[["^ ","^M",3,"^L",false,"~:tag","~$any"],["^ ","^M",4,"^L",false,"^T","^U"],["^ ","^M",5,"^L",false,"^T","^U"],["^ ","^M",6,"^L",false,"^T","^U"]],"^@",7,"^B",7,"^N",6,"~:fn-var",true,"^E",["^F",[["^H","^I","~$f"],["^H","^I","~$f","~$x"],["^H","^I","~$f","~$x","~$y"],["^H","^I","~$f","~$x","~$y","^J"]]]],"~$swap-vals-result",["^ ","^=",null,"^>",["^ ","^?","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/c3kit/apron/cursor.cljc","^@",13,"^A",8,"^B",13,"^C",24,"^D",true,"^E",["^F",["^G",["^F",[["^I","~$result"]]]]]],"^D",true,"^5","~$c3kit.apron.cursor/swap-vals-result","^?","resources/public/cljs/c3kit/apron/cursor.cljc","^C",24,"^O",["^F",[["^I","^X"]]],"^R",null,"^P",["^F",[null,null]],"^A",1,"^L",false,"^@",13,"~:ret-tag","~$cljs.core/IVector","^B",13,"^N",2,"^V",true,"^E",["^F",["^G",["^F",[["^I","^X"]]]]]],"~$do-reset!",["^ ","^=",null,"^>",["^ ","^?","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/c3kit/apron/cursor.cljc","^@",16,"^A",8,"^B",16,"^C",17,"^D",true,"^E",["^F",["^G",["^F",[["^H","^I","~$new-value"]]]]]],"^D",true,"^5","~$c3kit.apron.cursor/do-reset!","^?","resources/public/cljs/c3kit/apron/cursor.cljc","^C",17,"^O",["^F",[["^H","^I","^11"]]],"^R",null,"^P",["^F",[null,null]],"^A",1,"^L",false,"^@",16,"^B",16,"^N",3,"^V",true,"^E",["^F",["^G",["^F",[["^H","^I","^11"]]]]]],"~$to-string",["^ ","^=",null,"^>",["^ ","^?","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/c3kit/apron/cursor.cljc","^@",20,"^A",8,"^B",20,"^C",17,"^D",true,"^E",["^F",["^G",["^F",[["~$this","^I"]]]]]],"^D",true,"^5","~$c3kit.apron.cursor/to-string","^?","resources/public/cljs/c3kit/apron/cursor.cljc","^C",17,"^O",["^F",[["^14","^I"]]],"^R",null,"^P",["^F",[null,null]],"^A",1,"^L",false,"^@",20,"^Z","~$string","^B",20,"^N",2,"^V",true,"^E",["^F",["^G",["^F",[["^14","^I"]]]]]],"~$Cursor",["^ ","~:num-fields",2,"~:protocols",["^4",["~$cljs.core/IWatchable","~$cljs.core/IAtom","~$cljs.core/IReset","~$cljs.core/ISwap","~$cljs.core/IDeref","~$cljs.core/IPrintWithWriter"]],"^5","~$c3kit.apron.cursor/Cursor","^?","resources/public/cljs/c3kit/apron/cursor.cljc","^C",19,"~:type",true,"^A",13,"^@",54,"~:record",false,"^B",54,"^T","~$function","~:skip-protocol-flag",["^4",["^1:","^1;","^1<","^1=","^1>","^1?"]]],"~$->Cursor",["^ ","^=",null,"^>",["^ ","^19",["^4",["^1:","^1;","^1<","^1=","^1>","^1?"]],"^?","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/c3kit/apron/cursor.cljc","^C",19,"^A",13,"~:factory","~:positional","^@",54,"^B",54,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^1D",["^4",["^1:","^1;","^1<","^1=","^1>","^1?"]],"~:doc","Positional factory function for c3kit.apron.cursor/Cursor."],"^19",["^4",["^1:","^1;","^1<","^1=","^1>","^1?"]],"^5","~$c3kit.apron.cursor/->Cursor","^?","resources/public/cljs/c3kit/apron/cursor.cljc","^C",19,"^O",["^F",[["^H","^I"]]],"^R",null,"^P",["^F",[null,null]],"^A",4,"^L",false,"^1F","^1G","^@",54,"^Z","^1@","^B",54,"^N",2,"^V",true,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^1D",["^4",["^1:","^1;","^1<","^1=","^1>","^1?"]],"^1H","Positional factory function for c3kit.apron.cursor/Cursor."],"~$cursor",["^ ","^=",null,"^>",["^ ","^?","/Users/nathandickinson/Projects/tic-tac-toe/resources/public/cljs/c3kit/apron/cursor.cljc","^@",90,"^A",7,"^B",90,"^C",13,"^E",["^F",["^G",["^F",[["~$a","^I"]]]]],"^1H","Returns a cursor that focuses on a specific path within an atom-like reference.\n  The returned cursor implements deref, swap!, reset!, and watch,\n  allowing it to behave like an atom scoped to the given path.\n\n  Args:\n    a    - An atom-like reference (e.g., an atom) containing nested data.\n    path - A sequence of keys (e.g., [:user :name]) specifying the path to focus on.\n\n  Example:\n    (def state (atom {:user {:name \"Alice\"}}))\n    (def name-cursor (cursor state [:user :name]))\n    @name-cursor           ;; => \"Alice\"\n    (swap! name-cursor str \" Smith\") ;; Updates state to {:user {:name \"Alice Smith\"}}\n\n  Notes:\n    - The cursor delegates operations to the base atom, modifying its state at the given path.\n    - If the path becomes invalid (e.g., due to structural changes), dereferencing returns nil."],"^5","~$c3kit.apron.cursor/cursor","^?","resources/public/cljs/c3kit/apron/cursor.cljc","^C",13,"^O",["^F",[["~$a","^I"]]],"^R",null,"^P",["^F",[null,null]],"^A",1,"^L",false,"^@",90,"^Z",["^4",[null,"^1@"]],"^B",90,"^N",2,"^V",true,"^E",["^F",["^G",["^F",[["~$a","^I"]]]]],"^1H","Returns a cursor that focuses on a specific path within an atom-like reference.\n  The returned cursor implements deref, swap!, reset!, and watch,\n  allowing it to behave like an atom scoped to the given path.\n\n  Args:\n    a    - An atom-like reference (e.g., an atom) containing nested data.\n    path - A sequence of keys (e.g., [:user :name]) specifying the path to focus on.\n\n  Example:\n    (def state (atom {:user {:name \"Alice\"}}))\n    (def name-cursor (cursor state [:user :name]))\n    @name-cursor           ;; => \"Alice\"\n    (swap! name-cursor str \" Smith\") ;; Updates state to {:user {:name \"Alice Smith\"}}\n\n  Notes:\n    - The cursor delegates operations to the base atom, modifying its state at the given path.\n    - If the path becomes invalid (e.g., due to structural changes), dereferencing returns nil."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^H","^I"]],"~:order",["^H","^I"]],"^1H","Defines a Cursor that wraps an atom (or atom-like structure) and provides a way to focus on a\n  specific path within its nested data. It implements various Clojure interfaces to make it behave like an atom\n  itself, with dereferencing, swapping, resetting, and watching capabilities.","~:as-aliases",["^ "]]